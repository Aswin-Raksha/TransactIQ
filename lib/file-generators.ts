export interface DownloadableFile {
  content: string | Blob
  filename: string
  type: string
}

export function generatePDF(content: string, title = "AI Analysis Result"): DownloadableFile {
  // Simple PDF-like text format since we can't use jsPDF in this context
  const pdfContent = `
${title}
${"=".repeat(title.length)}

Generated on: ${new Date().toLocaleString()}

${content}

---
Generated by TransactIQ AI Content Processor
`

  return {
    content: pdfContent,
    filename: `ai-analysis-${Date.now()}.txt`,
    type: "text/plain",
  }
}

export function generateCSV(data: any[], filename?: string): DownloadableFile {
  let csvContent: string

  if (Array.isArray(data) && data.length > 0) {
    // Simple CSV generation
    const headers = Object.keys(data[0])
    const csvRows = [
      headers.join(","),
      ...data.map((row) =>
        headers
          .map((header) => {
            const value = row[header]
            // Escape commas and quotes
            if (typeof value === "string" && (value.includes(",") || value.includes('"'))) {
              return `"${value.replace(/"/g, '""')}"`
            }
            return value
          })
          .join(","),
      ),
    ]
    csvContent = csvRows.join("\n")
  } else {
    // If data is not in expected format, create a simple structure
    csvContent = [
      "Field,Value",
      `"AI Analysis Result","${JSON.stringify(data).replace(/"/g, '""')}"`,
      `"Generated At","${new Date().toISOString()}"`,
    ].join("\n")
  }

  return {
    content: csvContent,
    filename: filename || `ai-analysis-${Date.now()}.csv`,
    type: "text/csv",
  }
}

export function downloadFile(file: DownloadableFile) {
  const blob = file.content instanceof Blob ? file.content : new Blob([file.content], { type: file.type })
  const url = URL.createObjectURL(blob)

  const link = document.createElement("a")
  link.href = url
  link.download = file.filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)

  URL.revokeObjectURL(url)
}
